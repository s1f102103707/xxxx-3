[
  {
    "source": "server/api/@types/models.ts",
    "content": "export type UserModel = {\n  id: string;\n  email: string;\n  name: string;\n  createdTime: number;\n};\n\nexport type TaskModel = {\n  id: string;\n  label: string;\n  done: boolean;\n  createdTime: number;\n  image: { url: string; s3Key: string } | undefined;\n  author: { userId: string; name: string };\n};\n"
  },
  {
    "source": "server/api/controller.ts",
    "content": "import { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: () => ({ status: 200, body: '' }),\n}));\n"
  },
  {
    "source": "server/api/health/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: async () => ({\n    status: 200,\n    body: {\n      server: 'ok',\n      db: await prismaClient.$queryRaw`SELECT CURRENT_TIMESTAMP;`.then(() => 'ok' as const),\n    },\n  }),\n}));\n"
  },
  {
    "source": "server/api/health/index.ts",
    "content": "import type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  get: {\n    resBody: Record<'server' | 'db', 'ok'>;\n  };\n}>;\n"
  },
  {
    "source": "server/api/index.ts",
    "content": "import type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  get: {\n    resBody: string;\n  };\n}>;\n"
  },
  {
    "source": "server/api/private/controller.ts",
    "content": "import { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: () => ({ status: 200, body: 'Hello' }),\n}));\n"
  },
  {
    "source": "server/api/private/hooks.ts",
    "content": "import type { JwtUser } from '$/domain/model/userModel';\nimport { userRepo } from '$/domain/repository/userRepo';\nimport type { JWT_PROP_NAME } from '$/service/constants';\nimport { prismaClient } from '$/service/prismaClient';\nimport assert from 'assert';\nimport type { UserModel } from '../@types/models';\nimport { defineHooks } from './$relay';\n\nexport type AdditionalRequest = {\n  [Key in typeof JWT_PROP_NAME]: JwtUser;\n} & { user: UserModel };\n\nexport default defineHooks(() => ({\n  onRequest: async (req, res) => {\n    try {\n      await req.jwtVerify({ onlyCookie: true });\n    } catch (e) {\n      res.status(401).send();\n      return;\n    }\n  },\n  preHandler: async (req, res) => {\n    assert(req.jwtUser);\n\n    const user = await userRepo.findById(prismaClient, req.jwtUser.sub);\n\n    if (user === null) {\n      res.status(401).send();\n      return;\n    }\n\n    req.user = user;\n  },\n}));\n"
  },
  {
    "source": "server/api/private/index.ts",
    "content": "import type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  get: {\n    resBody: string;\n  };\n}>;\n"
  },
  {
    "source": "server/api/private/me/controller.ts",
    "content": "import { userUseCase } from '$/domain/useCase/userUseCase';\nimport assert from 'assert';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  post: {\n    hooks: {\n      preValidation: async (req) => {\n        assert(req.jwtUser);\n\n        await userUseCase.findOrCreate(req.jwtUser);\n      },\n    },\n    handler: ({ user }) => ({ status: 200, body: user }),\n  },\n}));\n"
  },
  {
    "source": "server/api/private/me/index.ts",
    "content": "import type { UserModel } from '$/api/@types/models';\nimport type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  post: {\n    resBody: UserModel;\n  };\n}>;\n"
  },
  {
    "source": "server/api/private/tasks/controller.ts",
    "content": "import { taskUseCase } from '$/domain/useCase/taskUseCase';\nimport { z } from 'zod';\nimport { defineController, multipartFileValidator } from './$relay';\n\nexport default defineController(() => ({\n  post: {\n    validators: {\n      body: z.object({ label: z.string(), image: multipartFileValidator().optional() }),\n    },\n    handler: async ({ user, body }) => ({\n      status: 201,\n      body: await taskUseCase.create(user, body.label, body.image),\n    }),\n  },\n  patch: {\n    validators: {\n      body: z.object({\n        taskId: z.string(),\n        done: z.boolean(),\n        label: z.string(),\n      }),\n    },\n    handler: async ({ user, body }) => {\n      const task = await taskUseCase.update(user, body.taskId, body.done, body.label);\n\n      return { status: 204, body: task };\n    },\n  },\n  delete: async ({ user, body }) => {\n    await taskUseCase.delete(user, body.taskId);\n\n    return { status: 204 };\n  },\n}));\n"
  },
  {
    "source": "server/api/private/tasks/index.ts",
    "content": "import type { TaskModel } from '$/api/@types/models';\nimport type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  post: {\n    reqFormat: FormData;\n    reqBody: {\n      label: string;\n      image?: Blob;\n    };\n    resBody: TaskModel;\n  };\n\n  patch: {\n    reqBody: {\n      taskId: string;\n      done: boolean;\n      label: string;\n    };\n    status: 204;\n    resBody: TaskModel;\n  };\n\n  delete: {\n    reqBody: {\n      taskId: string;\n    };\n    status: 204;\n  };\n}>;\n"
  },
  {
    "source": "server/api/public/controller.ts",
    "content": "import { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: () => ({ status: 200, body: 'Hello' }),\n}));\n"
  },
  {
    "source": "server/api/public/index.ts",
    "content": "import type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  get: {\n    resBody: string;\n  };\n}>;\n"
  },
  {
    "source": "server/api/public/tasks/controller.ts",
    "content": "import { taskRepo } from '$/domain/repository/taskRepo';\nimport { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: async ({ query }) => ({\n    status: 200,\n    body: await taskRepo.findAll(prismaClient, query?.limit),\n  }),\n}));\n"
  },
  {
    "source": "server/api/public/tasks/index.ts",
    "content": "import type { TaskModel } from '$/api/@types/models';\nimport type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  get: {\n    query?: {\n      limit?: number;\n    };\n    resBody: TaskModel[];\n  };\n}>;\n"
  },
  {
    "source": "server/api/session/controller.ts",
    "content": "import { COOKIE_NAME } from '$/service/constants';\nimport type { CookieSerializeOptions } from '@fastify/cookie';\nimport type { Methods } from '.';\nimport { defineController } from './$relay';\n\nexport type AdditionalRequest = {\n  body: Methods['post']['reqBody'];\n};\n\nconst options: CookieSerializeOptions = {\n  httpOnly: true,\n  secure: true,\n  path: '/',\n  sameSite: 'none',\n};\n\nexport default defineController(() => ({\n  post: {\n    hooks: {\n      preHandler: (req, reply, done) => {\n        const expiresIn = 60 * 60 * 24 * 5 * 1000;\n\n        reply.setCookie(COOKIE_NAME, req.body?.jwt ?? '', {\n          ...options,\n          expires: new Date(Date.now() + expiresIn),\n        });\n\n        done();\n      },\n    },\n    handler: () => {\n      return { status: 200, body: { status: 'success' } };\n    },\n  },\n  delete: {\n    hooks: {\n      preHandler: (_, reply, done) => {\n        reply.clearCookie(COOKIE_NAME, options);\n        done();\n      },\n    },\n    handler: () => {\n      return { status: 200, body: { status: 'success' } };\n    },\n  },\n}));\n"
  },
  {
    "source": "server/api/session/index.ts",
    "content": "import type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  post: {\n    reqBody: { jwt: string };\n    resBody: { status: 'success' };\n  };\n  delete: {\n    resBody: { status: 'success' };\n  };\n}>;\n"
  },
  {
    "source": "server/api/private/controller.ts",
    "content": "import { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: () => ({ status: 200, body: 'Hello' }),\n}));\n"
  },
  {
    "source": "server/api/private/me/controller.ts",
    "content": "import { userUseCase } from '$/domain/useCase/userUseCase';\nimport assert from 'assert';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  post: {\n    hooks: {\n      preValidation: async (req) => {\n        assert(req.jwtUser);\n\n        await userUseCase.findOrCreate(req.jwtUser);\n      },\n    },\n    handler: ({ user }) => ({ status: 200, body: user }),\n  },\n}));\n"
  },
  {
    "source": "server/api/private/tasks/controller.ts",
    "content": "import { taskUseCase } from '$/domain/useCase/taskUseCase';\nimport { z } from 'zod';\nimport { defineController, multipartFileValidator } from './$relay';\n\nexport default defineController(() => ({\n  post: {\n    validators: {\n      body: z.object({ label: z.string(), image: multipartFileValidator().optional() }),\n    },\n    handler: async ({ user, body }) => ({\n      status: 201,\n      body: await taskUseCase.create(user, body.label, body.image),\n    }),\n  },\n  patch: {\n    validators: {\n      body: z.object({\n        taskId: z.string(),\n        done: z.boolean(),\n        label: z.string(),\n      }),\n    },\n    handler: async ({ user, body }) => {\n      const task = await taskUseCase.update(user, body.taskId, body.done, body.label);\n\n      return { status: 204, body: task };\n    },\n  },\n  delete: async ({ user, body }) => {\n    await taskUseCase.delete(user, body.taskId);\n\n    return { status: 204 };\n  },\n}));\n"
  },
  {
    "source": "server/api/public/controller.ts",
    "content": "import { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: () => ({ status: 200, body: 'Hello' }),\n}));\n"
  },
  {
    "source": "server/api/public/tasks/controller.ts",
    "content": "import { taskRepo } from '$/domain/repository/taskRepo';\nimport { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: async ({ query }) => ({\n    status: 200,\n    body: await taskRepo.findAll(prismaClient, query?.limit),\n  }),\n}));\n"
  },
  {
    "source": "server/api/session/controller.ts",
    "content": "import { COOKIE_NAME } from '$/service/constants';\nimport type { CookieSerializeOptions } from '@fastify/cookie';\nimport type { Methods } from '.';\nimport { defineController } from './$relay';\n\nexport type AdditionalRequest = {\n  body: Methods['post']['reqBody'];\n};\n\nconst options: CookieSerializeOptions = {\n  httpOnly: true,\n  secure: true,\n  path: '/',\n  sameSite: 'none',\n};\n\nexport default defineController(() => ({\n  post: {\n    hooks: {\n      preHandler: (req, reply, done) => {\n        const expiresIn = 60 * 60 * 24 * 5 * 1000;\n\n        reply.setCookie(COOKIE_NAME, req.body?.jwt ?? '', {\n          ...options,\n          expires: new Date(Date.now() + expiresIn),\n        });\n\n        done();\n      },\n    },\n    handler: () => {\n      return { status: 200, body: { status: 'success' } };\n    },\n  },\n  delete: {\n    hooks: {\n      preHandler: (_, reply, done) => {\n        reply.clearCookie(COOKIE_NAME, options);\n        done();\n      },\n    },\n    handler: () => {\n      return { status: 200, body: { status: 'success' } };\n    },\n  },\n}));\n"
  },
  {
    "source": "server/domain/model/taskModel.ts",
    "content": "import type { TaskModel, UserModel } from '$/api/@types/models';\nimport { S3_PREFIX } from '$/domain/repository/s3Repo';\nimport type { MultipartFile } from '@fastify/multipart';\nimport { randomUUID } from 'crypto';\n\nconst dataToUrl = (data: MultipartFile) => {\n  const s3Key = `tasks/images/${randomUUID()}.${data.filename.split('.').at(-1)}`;\n\n  return { url: `${S3_PREFIX}${s3Key}`, s3Key };\n};\n\nexport type DeletableTaskId = { type: 'DeletableTask'; val: string };\n\nexport const taskModel = {\n  create: (user: UserModel, label: string, data: MultipartFile | undefined): TaskModel => ({\n    id: randomUUID(),\n    done: false,\n    label,\n    image: data === undefined ? undefined : dataToUrl(data),\n    createdTime: Date.now(),\n    author: { userId: user.id, name: user.name },\n  }),\n  deleteOrThrow: (user: UserModel, task: TaskModel): DeletableTaskId => {\n    if (user.id !== task.author.userId) throw new Error('cannot delete');\n\n    return { type: 'DeletableTask', val: task.id };\n  },\n  updateOrThrow: (\n    user: UserModel,\n    task: TaskModel,\n    updateData: { done: boolean; label: string }\n  ): TaskModel => {\n    if (user.id !== task.author.userId) throw new Error('cannot update task');\n\n    return { ...task, ...updateData };\n  },\n};\n"
  },
  {
    "source": "server/domain/model/userModel.ts",
    "content": "import type { UserModel } from '$/api/@types/models';\n\nexport type JwtUser = { sub: string; email: string; role: 'authenticated' | 'anon' };\n\nexport const userModel = {\n  create: (jwtUser: JwtUser): UserModel => {\n    return {\n      id: jwtUser.sub,\n      email: jwtUser.email,\n      name: jwtUser.sub.split('-')[0],\n      createdTime: Date.now(),\n    };\n  },\n};\n"
  },
  {
    "source": "server/domain/repository/s3Repo.ts",
    "content": "import { S3_BUCKET, S3_CUSTOM_ENDPOINT } from '$/service/envValues';\nimport { PutObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport type { MultipartFile } from '@fastify/multipart';\nimport { S3_ACCESS_KEY, S3_ENDPOINT, S3_REGION, S3_SECRET_KEY } from '../../service/envValues';\n\nconst s3Client = new S3Client({\n  endpoint: S3_ENDPOINT,\n  region: S3_REGION,\n  forcePathStyle: true,\n  credentials: { accessKeyId: S3_ACCESS_KEY, secretAccessKey: S3_SECRET_KEY },\n});\n\nexport const S3_PREFIX =\n  S3_CUSTOM_ENDPOINT === undefined ? `${S3_ENDPOINT}/${S3_BUCKET}/` : `${S3_CUSTOM_ENDPOINT}/`;\n\nexport const s3Repo = {\n  save: async (key: string, data: MultipartFile) => {\n    const command = new PutObjectCommand({\n      Bucket: S3_BUCKET,\n      ContentType: data.mimetype,\n      ACL: 'public-read',\n      Key: key,\n      Body: await data.toBuffer(),\n    });\n\n    await s3Client.send(command);\n  },\n};\n"
  },
  {
    "source": "server/domain/repository/taskRepo.ts",
    "content": "import type { TaskModel } from '$/api/@types/models';\nimport type { DeletableTaskId } from '$/domain/model/taskModel';\nimport type { Prisma, Task, User } from '@prisma/client';\nimport { S3_PREFIX } from './s3Repo';\n\nconst toModel = (task: Task & { User: User }): TaskModel => ({\n  id: task.id,\n  label: task.label,\n  done: task.done,\n  createdTime: task.createdAt.getTime(),\n  image:\n    task.imageKey === null\n      ? undefined\n      : { url: `${S3_PREFIX}${task.imageKey}`, s3Key: task.imageKey },\n  author: { userId: task.userId, name: task.User.name },\n});\n\nexport const taskRepo = {\n  save: async (tx: Prisma.TransactionClient, task: TaskModel) => {\n    await tx.task.upsert({\n      where: { id: task.id },\n      update: { done: task.done, label: task.label, imageKey: task.image?.s3Key },\n      create: {\n        id: task.id,\n        userId: task.author.userId,\n        done: task.done,\n        label: task.label,\n        imageKey: task.image?.s3Key,\n        createdAt: new Date(task.createdTime),\n      },\n    });\n  },\n  delete: async (tx: Prisma.TransactionClient, deletableTaskId: DeletableTaskId) => {\n    await tx.task.delete({ where: { id: deletableTaskId.val } });\n  },\n  findAll: (tx: Prisma.TransactionClient, limit?: number): Promise<TaskModel[]> =>\n    tx.task\n      .findMany({ take: limit, include: { User: true }, orderBy: { createdAt: 'desc' } })\n      .then((tasks) => tasks.map(toModel)),\n  findByIdOrThrow: (tx: Prisma.TransactionClient, taskId: string): Promise<TaskModel> =>\n    tx.task.findUniqueOrThrow({ where: { id: taskId }, include: { User: true } }).then(toModel),\n};\n"
  },
  {
    "source": "server/domain/repository/userRepo.ts",
    "content": "import type { UserModel } from '$/api/@types/models';\nimport type { Prisma, User } from '@prisma/client';\n\nconst toModel = (prismaUser: User): UserModel => ({\n  id: prismaUser.id,\n  email: prismaUser.email,\n  name: prismaUser.name,\n  createdTime: prismaUser.createdAt.getTime(),\n});\n\nexport const userRepo = {\n  save: async (tx: Prisma.TransactionClient, user: UserModel) => {\n    return tx.user.upsert({\n      where: { id: user.id },\n      update: { email: user.email, name: user.name },\n      create: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        createdAt: new Date(user.createdTime),\n      },\n    });\n  },\n  findById: (tx: Prisma.TransactionClient, userId: string): Promise<UserModel | null> =>\n    tx.user\n      .findUnique({ where: { id: userId } })\n      .then((user) => (user !== null ? toModel(user) : null)),\n};\n"
  },
  {
    "source": "server/domain/useCase/taskUseCase.ts",
    "content": "import type { TaskModel, UserModel } from '$/api/@types/models';\nimport { taskModel } from '$/domain/model/taskModel';\nimport { s3Repo } from '$/domain/repository/s3Repo';\nimport { taskRepo } from '$/domain/repository/taskRepo';\nimport { transaction } from '$/service/prismaClient';\nimport type { MultipartFile } from '@fastify/multipart';\n\nexport const taskUseCase = {\n  create: (user: UserModel, label: string, image: MultipartFile | undefined) =>\n    transaction<TaskModel>('RepeatableRead', async (tx) => {\n      const task = taskModel.create(user, label, image);\n\n      if (image !== undefined && task.image !== undefined) {\n        await s3Repo.save(task.image.s3Key, image);\n      }\n\n      await taskRepo.save(tx, task);\n\n      return task;\n    }),\n  delete: (user: UserModel, taskId: string) =>\n    transaction('RepeatableRead', async (tx) => {\n      const task = await taskRepo.findByIdOrThrow(tx, taskId);\n      const deletableTaskId = taskModel.deleteOrThrow(user, task);\n\n      await taskRepo.delete(tx, deletableTaskId);\n    }),\n  update: (user: UserModel, taskId: string, done: boolean, label: string) =>\n    transaction<TaskModel>('RepeatableRead', async (tx) => {\n      const task = await taskRepo.findByIdOrThrow(tx, taskId);\n      const newTask = taskModel.updateOrThrow(user, task, { done, label });\n\n      await taskRepo.save(tx, newTask);\n\n      return newTask;\n    }),\n};\n"
  },
  {
    "source": "server/domain/useCase/userUseCase.ts",
    "content": "import type { UserModel } from '$/api/@types/models';\nimport type { JwtUser } from '$/domain/model/userModel';\nimport { userModel } from '$/domain/model/userModel';\nimport { userRepo } from '$/domain/repository/userRepo';\nimport { transaction } from '$/service/prismaClient';\n\nexport const userUseCase = {\n  findOrCreate: (jwtUser: JwtUser) =>\n    transaction<UserModel>('RepeatableRead', async (tx) => {\n      const user = await userRepo.findById(tx, jwtUser.sub);\n      if (user !== null) return user;\n\n      const newUser = userModel.create(jwtUser);\n      await userRepo.save(tx, newUser);\n\n      return newUser;\n    }),\n};\n"
  },
  {
    "source": "server/api/$api.ts",
    "content": "import type { AspidaClient, BasicHeaders } from 'aspida';\nimport type { Methods as Methods_cvv211 } from './api/private/comments';\nimport type { Methods as Methods_vhg5dq } from './api/private/comments/_commentId@string';\nimport type { Methods as Methods_1fk8e42 } from './api/private/posts';\nimport type { Methods as Methods_jyfe28 } from './api/private/posts/_postId@string';\nimport type { Methods as Methods_11difg9 } from './api/private/users';\nimport type { Methods as Methods_1bgw96m } from './api/private/users/_userId@string';\nimport type { Methods as Methods_1q4zt76 } from './api/public/posts';\nimport type { Methods as Methods_1ksoksw } from './api/public/posts/_postId@string';\n\nconst api = <T>({ baseURL, fetch }: AspidaClient<T>) => {\n  const prefix = (baseURL === undefined ? 'http://localhost:3000' : baseURL).replace(/\\/$/, '');\n  const PATH0 = '/api/private/comments';\n  const PATH1 = '/api/private/posts';\n  const PATH2 = '/api/private/users';\n  const PATH3 = '/api/public/posts';\n  const GET = 'GET';\n  const POST = 'POST';\n  const PUT = 'PUT';\n  const DELETE = 'DELETE';\n\n  return {\n    api: {\n      private: {\n        comments: {\n          _commentId: (val3: string) => {\n            const prefix3 = `${PATH0}/${val3}`;\n\n            return {\n              /**\n               * @returns Comment updated successfully\n               */\n              put: (option: { body: Methods_vhg5dq['put']['reqBody'], config?: T | undefined }) =>\n                fetch<Methods_vhg5dq['put']['resBody'], BasicHeaders, Methods_vhg5dq['put']['status']>(prefix, prefix3, PUT, option).json(),\n              /**\n               * @returns Comment updated successfully\n               */\n              $put: (option: { body: Methods_vhg5dq['put']['reqBody'], config?: T | undefined }) =>\n                fetch<Methods_vhg5dq['put']['resBody'], BasicHeaders, Methods_vhg5dq['put']['status']>(prefix, prefix3, PUT, option).json().then(r => r.body),\n              delete: (option?: { config?: T | undefined } | undefined) =>\n                fetch<void, BasicHeaders, Methods_vhg5dq['delete']['status']>(prefix, prefix3, DELETE, option).send(),\n              $delete: (option?: { config?: T | undefined } | undefined) =>\n                fetch<void, BasicHeaders, Methods_vhg5dq['delete']['status']>(prefix, prefix3, DELETE, option).send().then(r => r.body),\n              $path: () => `${prefix}${prefix3}`,\n            };\n          },\n          /**\n           * @returns Comment created successfully\n           */\n          post: (option: { body: Methods_cvv211['post']['reqBody'], config?: T | undefined }) =>\n            fetch<Methods_cvv211['post']['resBody'], BasicHeaders, Methods_cvv211['post']['status']>(prefix, PATH0, POST, option).json(),\n          /**\n           * @returns Comment created successfully\n           */\n          $post: (option: { body: Methods_cvv211['post']['reqBody'], config?: T | undefined }) =>\n            fetch<Methods_cvv211['post']['resBody'], BasicHeaders, Methods_cvv211['post']['status']>(prefix, PATH0, POST, option).json().then(r => r.body),\n          $path: () => `${prefix}${PATH0}`,\n        },\n        posts: {\n          _postId: (val3: string) => {\n            const prefix3 = `${PATH1}/${val3}`;\n\n            return {\n              /**\n               * @returns Post updated successfully\n               */\n              put: (option: { body: Methods_jyfe28['put']['reqBody'], config?: T | undefined }) =>\n                fetch<Methods_jyfe28['put']['resBody'], BasicHeaders, Methods_jyfe28['put']['status']>(prefix, prefix3, PUT, option).json(),\n              /**\n               * @returns Post updated successfully\n               */\n              $put: (option: { body: Methods_jyfe28['put']['reqBody'], config?: T | undefined }) =>\n                fetch<Methods_jyfe28['put']['resBody'], BasicHeaders, Methods_jyfe28['put']['status']>(prefix, prefix3, PUT, option).json().then(r => r.body),\n              delete: (option?: { config?: T | undefined } | undefined) =>\n                fetch<void, BasicHeaders, Methods_jyfe28['delete']['status']>(prefix, prefix3, DELETE, option).send(),\n              $delete: (option?: { config?: T | undefined } | undefined) =>\n                fetch<void, BasicHeaders, Methods_jyfe28['delete']['status']>(prefix, prefix3, DELETE, option).send().then(r => r.body),\n              $path: () => `${prefix}${prefix3}`,\n            };\n          },\n          /**\n           * @returns Post created successfully\n           */\n          post: (option: { body: Methods_1fk8e42['post']['reqBody'], config?: T | undefined }) =>\n            fetch<Methods_1fk8e42['post']['resBody'], BasicHeaders, Methods_1fk8e42['post']['status']>(prefix, PATH1, POST, option).json(),\n          /**\n           * @returns Post created successfully\n           */\n          $post: (option: { body: Methods_1fk8e42['post']['reqBody'], config?: T | undefined }) =>\n            fetch<Methods_1fk8e42['post']['resBody'], BasicHeaders, Methods_1fk8e42['post']['status']>(prefix, PATH1, POST, option).json().then(r => r.body),\n          $path: () => `${prefix}${PATH1}`,\n        },\n        users: {\n          _userId: (val3: string) => {\n            const prefix3 = `${PATH2}/${val3}`;\n\n            return {\n              /**\n               * @returns A single user\n               */\n              get: (option?: { config?: T | undefined } | undefined) =>\n                fetch<Methods_1bgw96m['get']['resBody'], BasicHeaders, Methods_1bgw96m['get']['status']>(prefix, prefix3, GET, option).json(),\n              /**\n               * @returns A single user\n               */\n              $get: (option?: { config?: T | undefined } | undefined) =>\n                fetch<Methods_1bgw96m['get']['resBody'], BasicHeaders, Methods_1bgw96m['get']['status']>(prefix, prefix3, GET, option).json().then(r => r.body),\n              $path: () => `${prefix}${prefix3}`,\n            };\n          },\n          /**\n           * @returns User created successfully\n           */\n          post: (option: { body: Methods_11difg9['post']['reqBody'], config?: T | undefined }) =>\n            fetch<Methods_11difg9['post']['resBody'], BasicHeaders, Methods_11difg9['post']['status']>(prefix, PATH2, POST, option).json(),\n          /**\n           * @returns User created successfully\n           */\n          $post: (option: { body: Methods_11difg9['post']['reqBody'], config?: T | undefined }) =>\n            fetch<Methods_11difg9['post']['resBody'], BasicHeaders, Methods_11difg9['post']['status']>(prefix, PATH2, POST, option).json().then(r => r.body),\n          $path: () => `${prefix}${PATH2}`,\n        },\n      },\n      public: {\n        posts: {\n          _postId: (val3: string) => {\n            const prefix3 = `${PATH3}/${val3}`;\n\n            return {\n              /**\n               * @returns A single post\n               */\n              get: (option?: { config?: T | undefined } | undefined) =>\n                fetch<Methods_1ksoksw['get']['resBody'], BasicHeaders, Methods_1ksoksw['get']['status']>(prefix, prefix3, GET, option).json(),\n              /**\n               * @returns A single post\n               */\n              $get: (option?: { config?: T | undefined } | undefined) =>\n                fetch<Methods_1ksoksw['get']['resBody'], BasicHeaders, Methods_1ksoksw['get']['status']>(prefix, prefix3, GET, option).json().then(r => r.body),\n              $path: () => `${prefix}${prefix3}`,\n            };\n          },\n          /**\n           * @returns An array of posts\n           */\n          get: (option?: { config?: T | undefined } | undefined) =>\n            fetch<Methods_1q4zt76['get']['resBody'], BasicHeaders, Methods_1q4zt76['get']['status']>(prefix, PATH3, GET, option).json(),\n          /**\n           * @returns An array of posts\n           */\n          $get: (option?: { config?: T | undefined } | undefined) =>\n            fetch<Methods_1q4zt76['get']['resBody'], BasicHeaders, Methods_1q4zt76['get']['status']>(prefix, PATH3, GET, option).json().then(r => r.body),\n          $path: () => `${prefix}${PATH3}`,\n        },\n      },\n    },\n  };\n};\n\nexport type ApiInstance = ReturnType<typeof api>;\nexport default api;\n"
  },
  {
    "source": "server/api/@types/index.ts",
    "content": "/* eslint-disable */\nexport type User = {\n  id?: string | undefined\n  email: string\n  name: string\n}\n\nexport type Post = {\n  id?: string | undefined\n  title: string\n  content?: string | null | undefined\n  published?: boolean | undefined\n  authorId: string\n}\n\nexport type Comment = {\n  id?: string | undefined\n  text: string\n  postId: string\n  authorId: string\n}\n\nexport type Category = {\n  id?: string | undefined\n  name: string\n}\n"
  },
  {
    "source": "server/api/api/private/comments/_commentId@string/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../../@types'\n\nexport type Methods = {\n  put: {\n    status: 200\n    /** Comment updated successfully */\n    resBody: Types.Comment\n    reqBody: Types.Comment\n  }\n\n  delete: {\n    status: 204\n  }\n}\n"
  },
  {
    "source": "server/api/api/private/comments/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../@types'\n\nexport type Methods = {\n  post: {\n    status: 201\n    /** Comment created successfully */\n    resBody: Types.Comment\n    reqBody: Types.Comment\n  }\n}\n"
  },
  {
    "source": "server/api/api/private/posts/_postId@string/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../../@types'\n\nexport type Methods = {\n  put: {\n    status: 200\n    /** Post updated successfully */\n    resBody: Types.Post\n    reqBody: Types.Post\n  }\n\n  delete: {\n    status: 204\n  }\n}\n"
  },
  {
    "source": "server/api/api/private/posts/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../@types'\n\nexport type Methods = {\n  post: {\n    status: 201\n    /** Post created successfully */\n    resBody: Types.Post\n    reqBody: Types.Post\n  }\n}\n"
  },
  {
    "source": "server/api/api/private/users/_userId@string/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../../@types'\n\nexport type Methods = {\n  get: {\n    status: 200\n    /** A single user */\n    resBody: Types.User\n  }\n}\n"
  },
  {
    "source": "server/api/api/private/users/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../@types'\n\nexport type Methods = {\n  post: {\n    status: 201\n    /** User created successfully */\n    resBody: Types.User\n    reqBody: Types.User\n  }\n}\n"
  },
  {
    "source": "server/api/api/public/posts/_postId@string/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../../@types'\n\nexport type Methods = {\n  get: {\n    status: 200\n    /** A single post */\n    resBody: Types.Post\n  }\n}\n"
  },
  {
    "source": "server/api/api/public/posts/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../@types'\n\nexport type Methods = {\n  get: {\n    status: 200\n    /** An array of posts */\n    resBody: Types.Post[]\n  }\n}\n"
  },
  {
    "source": "server/api/private/comments/_commentId@string/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  put: async ({ params, body }) => {\n    const comment = await prismaClient.comment.update({\n      where: { id: params.commentId },\n      data: body,\n    });\n    return { status: 200, body: comment };\n  },\n  delete: async ({ params }) => {\n    await prismaClient.comment.delete({\n      where: { id: params.commentId },\n    });\n    return { status: 204 };\n  },\n}));\n"
  },
  {
    "source": "server/api/private/comments/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  post: async ({ body }) => {\n    const comment = await prismaClient.comment.create({\n      data: body,\n    });\n    return { status: 201, body: comment };\n  },\n}));\n"
  },
  {
    "source": "server/api/private/posts/_postId@string/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  put: async ({ params, body }) => {\n    const post = await prismaClient.post.update({\n      where: { id: params.postId },\n      data: body,\n    });\n    return { status: 200, body: post };\n  },\n  delete: async ({ params }) => {\n    await prismaClient.post.delete({\n      where: { id: params.postId },\n    });\n    return { status: 204 };\n  },\n}));\n"
  },
  {
    "source": "server/api/private/posts/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  post: async ({ body }) => {\n    const post = await prismaClient.post.create({\n      data: body,\n    });\n    return { status: 201, body: post };\n  },\n}));\n"
  },
  {
    "source": "server/api/private/users/_userId@string/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: async ({ params }) => {\n    const user = await prismaClient.user.findUniqueOrThrow({\n      where: { id: params.userId },\n    });\n    return { status: 200, body: user };\n  },\n}));\n"
  },
  {
    "source": "server/api/private/users/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  post: async ({ body }) => {\n    const user = await prismaClient.user.create({\n      data: body,\n    });\n    return { status: 201, body: user };\n  },\n}));\n"
  },
  {
    "source": "server/api/public/posts/_postId@string/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: async ({ params }) => {\n    const post = await prismaClient.post.findUniqueOrThrow({\n      where: { id: params.postId },\n    });\n    return { status: 200, body: post };\n  },\n}));\n"
  },
  {
    "source": "server/api/public/posts/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: async () => {\n    const posts = await prismaClient.post.findMany();\n    return { status: 200, body: posts };\n  },\n}));\n"
  },
  {
    "source": "server/api/private/comments/_commentId@string/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  put: async ({ params, body }) => {\n    const comment = await prismaClient.comment.update({\n      where: { id: params.commentId },\n      data: body,\n    });\n    return { status: 200, body: comment };\n  },\n  delete: async ({ params }) => {\n    await prismaClient.comment.delete({\n      where: { id: params.commentId },\n    });\n    return { status: 204 };\n  },\n}));\n"
  },
  {
    "source": "server/api/private/comments/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  post: async ({ body }) => {\n    const comment = await prismaClient.comment.create({\n      data: body,\n    });\n    return { status: 201, body: comment };\n  },\n}));\n"
  },
  {
    "source": "server/api/private/posts/_postId@string/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  put: async ({ params, body }) => {\n    const post = await prismaClient.post.update({\n      where: { id: params.postId },\n      data: body,\n    });\n    return { status: 200, body: post };\n  },\n  delete: async ({ params }) => {\n    await prismaClient.post.delete({\n      where: { id: params.postId },\n    });\n    return { status: 204 };\n  },\n}));\n"
  },
  {
    "source": "server/api/private/posts/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  post: async ({ body }) => {\n    const post = await prismaClient.post.create({\n      data: body,\n    });\n    return { status: 201, body: post };\n  },\n}));\n"
  },
  {
    "source": "server/api/private/users/_userId@string/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: async ({ params }) => {\n    const user = await prismaClient.user.findUniqueOrThrow({\n      where: { id: params.userId },\n    });\n    return { status: 200, body: user };\n  },\n}));\n"
  },
  {
    "source": "server/api/private/users/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  post: async ({ body }) => {\n    const user = await prismaClient.user.create({\n      data: body,\n    });\n    return { status: 201, body: user };\n  },\n}));\n"
  },
  {
    "source": "server/api/public/posts/_postId@string/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: async ({ params }) => {\n    const post = await prismaClient.post.findUniqueOrThrow({\n      where: { id: params.postId },\n    });\n    return { status: 200, body: post };\n  },\n}));\n"
  },
  {
    "source": "server/api/public/posts/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: async () => {\n    const posts = await prismaClient.post.findMany();\n    return { status: 200, body: posts };\n  },\n}));\n"
  }
]